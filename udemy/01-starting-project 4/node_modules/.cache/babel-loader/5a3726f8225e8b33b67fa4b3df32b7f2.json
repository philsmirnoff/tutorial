{"ast":null,"code":"var _jsxFileName = \"/Users/ilfiryakupov/Desktop/udemy/01-starting-project 4/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; // 2. separate function that we will pass to useReducer as a reduce function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  // 10. we check the action type and return the new state\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  } // 12. we check the action type and return the new state\n\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  // 10. we check the action type and return the new state\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  } // 12. we check the action type and return the new state\n\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // 1. we un comment the state and the state change function\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); // 3. we use useReducer to manage the state of the email\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  }); //   useEffect(() => {\n  //    const identifier = setTimeout(() => {\n  //     setFormIsValid(\n  //       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n  //     );\n  //   }, 500);\n  //   return () => {\n  //     clearTimeout(identifier);\n  //  };\n  //   }, [enteredEmail, enteredPassword]);\n  // we will use eventually useEffect!!\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(emailState.isValid && passwordState.isValid);\n    }, 500);\n    return () => {\n      clearTimeout(identifier);\n    };\n  }, [emailState, passwordState]);\n\n  const emailChangeHandler = event => {\n    // 9. we use dispatch to change the state of the email\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // 4 thats where we gonna store the entered vaslue in the state\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    //   );\n  }; // 5.\n\n\n  const validateEmailHandler = () => {\n    // 11. we use dispatch to change the state of the email\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // 6. we pass the emailState to the onLogin function\n\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${// 7. we add the emailState.isValid to the class name\n        emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\" // 8. we add the emailState.value to the value\n          ,\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"qp+E7eOeLtyq7eDZc1t6BXLJ5j4=\");\n\n_c = Login;\nexport default Login; ////\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/Users/ilfiryakupov/Desktop/udemy/01-starting-project 4/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n// 2. separate function that we will pass to useReducer as a reduce function\nconst emailReducer = (state, action) => {\n  // 10. we check the action type and return the new state\n  if (action.type === 'USER_INPUT') {\n    return { value: action.val, isValid: action.val.includes('@') };\n  }\n  // 12. we check the action type and return the new state\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.includes('@') };\n  }\n  return { value: '', isValid: false }\n}\n\nconst passwordReducer = (state, action) => {\n  // 10. we check the action type and return the new state\n  if (action.type === 'USER_INPUT') {\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  // 12. we check the action type and return the new state\n  if (action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: '', isValid: false }\n}\n\n\nconst Login = (props) => {\n  // 1. we un comment the state and the state change function\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n// 3. we use useReducer to manage the state of the email\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {value: '', isValid: null});\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {value: '', isValid: null});\n\n\n//   useEffect(() => {\n//    const identifier = setTimeout(() => {\n//     setFormIsValid(\n//       enteredEmail.includes('@') && enteredPassword.trim().length > 6\n//     );\n//   }, 500);\n\n//   return () => {\n//     clearTimeout(identifier);\n//  };\n//   }, [enteredEmail, enteredPassword]);\n\n\n// we will use eventually useEffect!!\n\n  useEffect(() => {\n   const identifier = setTimeout(() => {\n    setFormIsValid(\n      emailState.isValid && passwordState.isValid\n    );\n  }, 500);\n\n  return () => {\n    clearTimeout(identifier);\n };\n  }, [emailState, passwordState]);\n\n  const emailChangeHandler = (event) => {\n    // 9. we use dispatch to change the state of the email\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    //   );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value});\n// 4 thats where we gonna store the entered vaslue in the state\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    //   );\n  };\n// 5.\n  const validateEmailHandler = () => {\n    // 11. we use dispatch to change the state of the email\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({type: 'INPUT_BLUR'});\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({type: 'INPUT_BLUR'});\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    // 6. we pass the emailState to the onLogin function\n    props.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            // 7. we add the emailState.isValid to the class name\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            // 8. we add the emailState.value to the value\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={passwordState.value}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n////\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}